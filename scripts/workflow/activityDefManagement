var util = require("workflow/util");

function ActivityDefinitionsManagement(apsdb) {
  this.apsdb = apsdb;
}

/**
 * retrieve the list of activity definitions scripts that have a name matching 
 * the content of the "filters" variable, and return the properties defined in
 * each XXXActivityDefinition class defined in these scripts
 * @function listActivityDefinitions 
 * @return {Array} an array of activity definitions properties such as the following
 *  [{"filter": "", "fullTypeName": "workflow/activityDefinition", "name": "ActivityDefinition", "startCondition": ""}, ...]
 */
ActivityDefinitionsManagement.prototype.listActivityDefinitions = function(introspect) {

  var subList = [];
  if (introspect) {
   console.log("meeuh " + introspect);
    var filters = ["workflow/", "ctivityDefinition"];
    var response = this.apsdb.callApi("ListScripts", null, null);
    if (response.metadata && response.metadata.status == "failure") {

      throw {
        "errorCode": response.metadata.errorCode,
        "errorDetail": response.metadata.errorDetail
      };
    }

    var scripts = response.result.scripts;
    subList = this._filter(scripts, filters);
   
  }else {
    subList = ["workflow/activityDefinition", "workflow/humanActivityDefinition"];    
  }  
  
  var classes = [];
  for (var i = 0; i < subList.length; i++) {
    classes.push(this._introspectClass(subList[i]));
  }

  return classes;
}

/**
 * filter the list of provided scripts in the current account according to the provided filters
 * all filters have to be found in the name of the script.
 * this method can throw exceptions
 * @function 
 * @param {Array} scriptList : the list of scripts returned by a call to the ListScripts API
 * @param {Array} filters : an array of strings that should be found in the names of the scripts list
 * @return {Array} an array of script path + names matching the filters
 */
ActivityDefinitionsManagement.prototype._filter = function(scriptList, filters) {
  
  var subList = [];
  for (var i = 0; i < scriptList.length; i++) {
    
    if (this._isInFilter(scriptList[i].name, filters)) {
		subList.push(scriptList[i].name);
    }    
  }
  
  return subList;
}

/**
 * @function _isInFilter
 * @param {String} scriptName : the path +  name of a script
 * @param {Array} filters : an array of strings that should be found in the names of the scripts list
 * @return {Boolean} true if scriptName contains all the filters, false otherwise
 */
ActivityDefinitionsManagement.prototype._isInFilter = function(scriptName, filters) {
 
  var found = false;
  for (var i = 0; i < filters.length; i++) {    
    found = scriptName.indexOf(filters[i]) > -1 ? true : false;
  }
  
  return found;
}

/**
 *
 */
ActivityDefinitionsManagement.prototype._introspectClass = function(scriptName) {
  
  var activityModuleDef = require(scriptName);
  var activityClassName = util.getClassNameFromModuleName(scriptName);
  var activityDef = new (activityModuleDef[activityClassName])({name:activityClassName});
  if (activityDef.overrideExecute) {
    activityDef.execute = "";
  }
  
  return activityDef;
}
